import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import net.fabricmc.loom.task.RemapJarTask

apply plugin: "fabric-loom"
apply plugin: "com.gradleup.shadow"

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    shade project(":common")

    // Shadow configuration required to only relocate adventure calls in ComponentConverter, not whole plugin
    shade project(path: ":extensions:adventure", configuration: "shadow")

    implementation "net.playeranalytics:platform-abstraction-layer-api:$palVersion"

    // https://wiki.fabricmc.net/tutorial:migratemappings
    minecraft "com.mojang:minecraft:1.21.9"
    mappings "net.fabricmc:yarn:1.21.9+build.1:v2"
    modImplementation "net.fabricmc:fabric-loader:0.17.2"
    modImplementation("me.lucko:fabric-permissions-api:0.4.1")

    // Fabric API
    Set<String> apiModules = [
            "fabric-api-base",
            "fabric-command-api-v2",
            "fabric-entity-events-v1",
            "fabric-lifecycle-events-v1",
            "fabric-networking-api-v1",
            "fabric-message-api-v1"
    ]

    apiModules.forEach {
        modImplementation(fabricApi.module(it, "0.134.0+1.21.9"))
    }

    testImplementation(testFixtures(project(":common")))
    testImplementation(project(":extensions:adventure"))
}

loom {
    // Defining separate refmap file prevents conflicts with plugin mixins
    mixin.defaultRefmapName.set("plan-fabric-refmap.json")
}

tasks.withType(JavaCompile).configureEach {
    options.release.set(21)
}

processResources {
    inputs.property "version", fullVersion

    filesMatching("fabric.mod.json") {
        expand "version": fullVersionSemantic
    }
}

tasks.named("shadowJar", ShadowJar) {
    configurations = [project.configurations.shade]

    // Exclude these files
    exclude "**/*.svg"
    exclude "**/*.psd"
    exclude "**/*.map"
    exclude "LICENSE*.txt"
    exclude "jetty-dir.css"

    exclude "**/module-info.class"
    exclude "module-info.class"
    exclude "META-INF/versions/" // Causes Sponge to crash
    exclude "mozilla/**/*"

    // Exclude extra dependencies
    exclude "org/checkerframework/**/*" // Dagger compiler
    exclude "com/google/common/**/*"
    exclude "com/google/thirdparty/**/*"
    exclude "com/google/auto/**/*"

    exclude "org.javassist:.*"
    // Exclude swagger
    exclude "org/yaml/**/*"
    exclude "nonapi/**/*"
    exclude "io/github/classgraph/**/*"
    exclude "io/swagger/**/*"
    exclude "com/sun/activation/**/*"
    exclude "jakarta/activation/**/*"
    exclude "jakarta/validation/**/*"
    exclude "jakarta/ws/**/*"
    exclude "jakarta/xml/**/*"
    exclude "javassist/**/*"

    relocate("org.apache", "plan.org.apache") {
        exclude "org/apache/logging/**"
        exclude "org/apache/maven/**" // This needs to be unrelocated for Sponge
    }

    // Don't relocate MySQL or SQLite since they are loaded with a isolated class loader
    // relocate "org.sqlite", "plan.org.sqlite"
    // relocate "com.mysql", "plan.com.mysql"
    // relocate "com.google.protobuf", "plan.com.mysql.cj.x.google.protobuf"

    relocate "dagger", "plan.dagger"
    relocate "javax.inject", "plan.javax.inject"
    relocate "jakarta.inject", "plan.jakarta.inject"

    relocate "dev.vankka.dependencydownload", "plan.dev.vankka.dependencydownload"
    relocate "com.github.benmanes", "plan.com.github.benmanes"
    relocate "com.maxmind", "plan.com.maxmind"
    relocate "com.fasterxml", "plan.com.fasterxml"
    relocate "com.zaxxer", "plan.com.zaxxer"
    relocate "com.google.gson", "plan.com.google.gson"
    relocate "com.google.errorprone", "plan.com.google.errorprone"
    relocate "org.bstats", "plan.org.bstats"
    relocate "org.jasypt", "plan.org.jasypt"
    relocate "org.json.simple", "plan.org.json.simple"
    relocate "org.slf4j", "plan.org.slf4j"

    relocate "org.eclipse.jetty", "plan.org.eclipse.jetty"
    relocate "jakarta.servlet", "plan.jakarta.servlet"
    relocate "javax.servlet", "plan.javax.servlet"

    mergeServiceFiles()
}

tasks.register("remapShadowJar", RemapJarTask) {
    dependsOn tasks.shadowJar
    input = tasks.shadowJar.archiveFile
    addNestedDependencies = true
    destinationDirectory.set(file("$rootDir/builds/"))
    archiveBaseName.set("PlanFabric")
}

tasks.assemble.dependsOn tasks.remapShadowJar
