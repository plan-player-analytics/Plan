import dev.vankka.dependencydownload.task.GenerateDependencyDownloadResourceTask

plugins {
    id("java-test-fixtures")
    id "dev.vankka.dependencydownload.plugin" version "$dependencyDownloadVersion"
    id "com.github.node-gradle.node" version "7.1.0"
    id "io.swagger.core.v3.swagger-gradle-plugin" version "2.2.28"
}

configurations {
    // Runtime downloading scopes
    mysqlDriver
    mariadbDriver
    sqliteDriver
    ipAddressMatcher
    testImplementation.extendsFrom mysqlDriver, mariadbDriver, sqliteDriver, ipAddressMatcher
    compileOnly.extendsFrom mysqlDriver, mariadbDriver, sqliteDriver, ipAddressMatcher

    swaggerJson // swagger.json configuration
}

tasks.register("generateResourceForMySQLDriver", GenerateDependencyDownloadResourceTask) {
    var conf = configurations.mysqlDriver
    configuration = conf
    file = "assets/plan/dependencies/" + conf.name + ".txt"
    // Not necessary to include in the resource
    includeShadowJarRelocations = false
}

tasks.register("generateResourceForMariaDBDriver", GenerateDependencyDownloadResourceTask) {
    var conf = configurations.mariadbDriver
    configuration = conf
    file = "assets/plan/dependencies/" + conf.name + ".txt"
    // Not necessary to include in the resource
    includeShadowJarRelocations = false
}

tasks.register("generateResourceForSQLiteDriver", GenerateDependencyDownloadResourceTask) {
    var conf = configurations.sqliteDriver
    configuration = conf
    file = "assets/plan/dependencies/" + conf.name + ".txt"
    // Not necessary to include in the resource
    includeShadowJarRelocations = false
}

tasks.register("generateResourceForIpAddressMatcher", GenerateDependencyDownloadResourceTask) {
    var conf = configurations.ipAddressMatcher
    configuration = conf
    file = "assets/plan/dependencies/" + conf.name + ".txt"
    // Not necessary to include in the resource
    includeShadowJarRelocations = false
}

dependencies {
    api project(":api")
    api project(":extensions")
    implementation "net.playeranalytics:platform-abstraction-layer-api:$palVersion"

    compileOnly "net.kyori:adventure-api:$adventureVersion"
    implementation("dev.vankka:dependencydownload-runtime:$dependencyDownloadVersion") {
        // Effectively disables relocating
        exclude module: "jar-relocator"
    }
    mysqlDriver "com.mysql:mysql-connector-j:$mysqlVersion"
    mariadbDriver "org.mariadb.jdbc:mariadb-java-client:$mariadbVersion"
    sqliteDriver "org.xerial:sqlite-jdbc:$sqliteVersion"
    sqliteDriver "org.slf4j:slf4j-nop:1.7.36"
    ipAddressMatcher "com.github.seancfoley:ipaddress:$ipAddressMatcherVersion"

    compileOnlyApi "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
    api "org.apache.commons:commons-text:$commonsTextVersion"
    api "org.apache.commons:commons-compress:$commonsCompressVersion"
    api "commons-codec:commons-codec:$commonsCodecVersion"
    api "com.github.ben-manes.caffeine:caffeine:$caffeineVersion"
    implementation "com.zaxxer:HikariCP:$hikariVersion"
    implementation "org.slf4j:slf4j-nop:$slf4jVersion"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "com.maxmind.geoip2:geoip2:$geoIpVersion"
    api "com.google.code.gson:gson:$gsonVersion"
    api "org.eclipse.jetty:jetty-server:$jettyVersion"
    implementation "org.eclipse.jetty:jetty-alpn-java-server:$jettyVersion"
    implementation "org.eclipse.jetty.http2:http2-server:$jettyVersion"
    implementation "org.jasypt:jasypt:$jasyptVersion:lite"

    // Swagger annotations
    implementation "jakarta.ws.rs:jakarta.ws.rs-api:4.0.0"
    api "io.swagger.core.v3:swagger-annotations:$swaggerVersion"
    implementation "io.swagger.core.v3:swagger-core-jakarta:$swaggerVersion"
    implementation "io.swagger.core.v3:swagger-jaxrs2-jakarta:$swaggerVersion"


    // Test Tooling Dependencies
    testFixturesApi "org.junit.jupiter:junit-jupiter:$junitVersion"      // JUnit 5
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"

    testFixturesApi "org.mockito:mockito-core:$mockitoVersion"           // Mockito Core
    testFixturesApi "org.mockito:mockito-junit-jupiter:$mockitoVersion"  // Mockito JUnit 5 Extension
    testFixturesImplementation "net.playeranalytics:platform-abstraction-layer-api:$palVersion"

    // Testing dependencies required by Plan
    testImplementation project(":api")
    testImplementation project(":extensions:adventure")
    testImplementation "com.google.code.gson:gson:$gsonVersion"
    testImplementation "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
    testImplementation "org.testcontainers:testcontainers:$testContainersVersion"
    testImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"
    testImplementation "org.testcontainers:nginx:$testContainersVersion"
    testImplementation "org.awaitility:awaitility:$awaitilityVersion"
    testFixturesApi "com.google.guava:guava:$guavaVersion"

    testFixturesApi "org.xerial:sqlite-jdbc:$sqliteVersion" // SQLite
    testFixturesApi "com.mysql:mysql-connector-j:$mysqlVersion" // MySQL
    testFixturesApi "org.mariadb.jdbc:mariadb-java-client:$mariadbVersion" // MariaDB

    testImplementation "com.google.dagger:dagger:$daggerVersion"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
}

test {
    environment "PLAN_TEST_NODE_STRING", "String"
    environment "PLAN_TEST_NODE_BOOLEAN", "true"
    environment "PLAN_TEST_NODE_INTEGER", "5"
    environment "PLAN_TEST_NODE_DOUBLE", "0.5"
    environment "PLAN_TEST_NODE_LONG", "9223372036854775807"
    environment "PLAN_TEST_NODE_STRINGLIST", "- Test\n- Another"
}

node {
    download = true
    version = "20.9.0"
    nodeProjectDir = file("$rootDir/react/dashboard")
}

tasks.register("bundle", YarnTask) {
    dependsOn yarn
    inputs.files(fileTree("$rootDir/react/dashboard/src"))
    inputs.file("$rootDir/react/dashboard/package.json")
    inputs.file("$rootDir/react/dashboard/vite.config.js")

    outputs.dir("$rootDir/react/dashboard/build")

    args = ["run", "build"]
}

tasks.register("yarnStart", YarnTask) {
    logging.captureStandardOutput LogLevel.INFO
    inputs.file("$rootDir/react/dashboard/package.json")

    dependsOn yarn
    args = ["run", "start"]
}

tasks.register("copyYarnBuildResults") {
    // Skip Yarn build on Jitpack since Jitpack doesn't offer gclib version compatible with Node 20
    // Jitpack build is used mainly for java dependencies.
    onlyIf("not running in Jitpack") { !project.hasProperty("isJitpack") }
    inputs.files(fileTree("$rootDir/react/dashboard/build"))
    outputs.dir("$rootDir/common/build/resources/main/assets/plan/web")
    outputs.dir("$rootDir/common/build/resources/test/assets/plan/web")

    dependsOn bundle
    doLast {
        mkdir "$rootDir/common/build/resources/main/assets/plan/web"
        copy {
            from "$rootDir/react/dashboard/build"
            into "$rootDir/common/build/resources/main/assets/plan/web"
        }
        copy {
            into "$rootDir/common/build/resources/main/assets/plan/web"
            into "$rootDir/common/build/resources/test/assets/plan/web"
        }
    }
}

tasks.withType(Test.class).configureEach {
    forkEvery = 100
}

tasks.named("checkstyleTest").configure {
    // FAILURE: Task ':common:checkstyleTest' uses this output of task ':common:copyYarnBuildResults'
    // without declaring an explicit or implicit dependency.
    it.dependsOn(copyYarnBuildResults)
}

tasks.register("determineAssetModifications") {
    // Skip Yarn build on Jitpack since Jitpack doesn't offer gclib version compatible with Node 20
    // Jitpack build is used mainly for java dependencies.
    onlyIf("not running in Jitpack") { !project.hasProperty("isJitpack") }
    dependsOn bundle
    inputs.files(fileTree("$rootDir/react/dashboard/build"))
    inputs.files(fileTree(dir: "src/main/resources/assets/plan/web"))
    inputs.files(fileTree(dir: "src/main/resources/assets/plan/locale"))
    outputs.file("build/resources/main/assets/plan/AssetVersion.yml")

    doLast {
        mkdir "build/resources/main/assets/plan"
        def versionFile = file("build/resources/main/assets/plan/AssetVersion.yml")
        versionFile.text = "" // Clear previous build
        ConfigurableFileTree tree = fileTree(dir: "src/main/resources/assets/plan/web")
        tree.forEach { File f ->
            def gitModified = new ByteArrayOutputStream()
            exec {
                commandLine "git", "log", "-1", "--pretty=%ct", f.toString()
                standardOutput = gitModified
            }
            def gitModifiedAsString = gitModified.toString().strip()
            // git returns UNIX time in seconds, but most things in Java use UNIX time in milliseconds
            def modified = gitModifiedAsString.isEmpty() ? System.currentTimeMillis() : Long.parseLong(gitModifiedAsString) * 1000
            def relativePath = tree.getDir().toPath().relativize(f.toPath()) // File path relative to the tree
            versionFile.text += String.format(
                    "%s: %s\n", relativePath.toString().replace(".", ",").replace("\\", "/"), modified
            )
        }

        tree = fileTree(dir: "src/main/resources/assets/plan/locale")
        tree.forEach { File f ->
            def gitModified = new ByteArrayOutputStream()
            exec {
                commandLine "git", "log", "-1", "--pretty=%ct", f.toString()
                standardOutput = gitModified
            }
            def gitModifiedAsString = gitModified.toString().strip()
            // git returns UNIX time in seconds, but most things in Java use UNIX time in milliseconds
            def modified = gitModifiedAsString.isEmpty() ? System.currentTimeMillis() : Long.parseLong(gitModifiedAsString) * 1000
            def relativePath = tree.getDir().toPath().relativize(f.toPath()) // File path relative to the tree
            versionFile.text += String.format(
                    "%s: %s\n", relativePath.toString().replace(".", ",").replace("\\", "/"), modified
            )
        }

        tree = fileTree("$rootDir/react/dashboard/build")
        tree.forEach { File f ->
            if (f.getName().endsWith(".map")) return
            def modified = System.currentTimeMillis()
            def relativePath = tree.getDir().toPath().relativize(f.toPath()) // File path relative to the tree
            versionFile.text += String.format(
                    "%s: %s\n", relativePath.toString().replace(".", ",").replace("\\", "/"), modified
            )
        }
    }
}

resolve { // Swagger json generation task
    outputFileName = "swagger"
    outputFormat = "JSON"
    prettyPrint = "TRUE"
    classpath = sourceSets.main.runtimeClasspath
    buildClasspath = classpath
    resourcePackages = [
            "com.djrapitops.plan.delivery.webserver",
            "com.djrapitops.plan.delivery.webserver.resolver.auth",
            "com.djrapitops.plan.delivery.webserver.resolver.json",
    ]
    outputDir = "build/generated-resources/swagger/assets/plan/web"
}

jar {
    dependsOn resolve
    from "build/generated-resources/swagger"
}

processResources {
    dependsOn copyYarnBuildResults
    dependsOn determineAssetModifications
    dependsOn generateResourceForMySQLDriver
    dependsOn generateResourceForSQLiteDriver
    dependsOn generateResourceForIpAddressMatcher
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from "build/sources/resources"
}
